---
title: "Azure Sentinel Monitoring and Alerting with SQL Injection"
categories:
  - Azure
  - SIEM
tags:
  - Azure
  - Cloud
  - Security
  - SIEM
toc: true
toc_label: "Azure Sentinel Monitoring and Alerting with SQL Injection"
toc_icon: "cloud"
---
<head>
<style>
code {
  font-family: "Tenorite";
  color: #0047AB;
  background-color: #F0FFFF;
  padding: 8px;
  font-size: 95%;
}
</style>
</head>
<body>
<h1 id="Overview"> Overview </h1>
<p> This projects aims to demostrate the ability of Azure sentinel to monitor Web Apllication Firewalls and generate incidents based on information gathered</p>
<img src="/assets/images/sentinelpostimg/image002.jpg" class="center"> 
<body>
<h1 id="WAF Policy">WAF Policy</h1>
<p> To create an application gateway within the WAF V2 tier, a WAF policy needs to be created. This is available from the Web Application Firewall Policies. This is referred to as a front door WAF policy. The configuration is straightforward for this policy; however, the Policy Mode needs to be set to detection to allow reporting to Sentinel while allowing exploitation of the database. This level of visibility is needed to produce a detailed incident report. </p>
<img src="/assets/images/sentinelpostimg/image004.jpg" class="center"> 
<p> Azure gives multiple policies for rule sets; these sets are based on the OWASP top 10 rules and cover the top web application vulnerabilities, these rules are an excellent basis for web app security, but this project has two focuses, SQLI (REQUEST-942-APPLICATION-ATTACK-SQLI) and PHP (REQUEST-933-APPLICATION-ATTACK-PHP)</p>
<img src="/assets/images/sentinelpostimg/image006.jpg" class="center"> 
<p> Nothing for custom rules or association (this is handled later) so we can move to review and create</p>
<img src="/assets/images/sentinelpostimg/image008.jpg" class="center"> 
<p>Now that the WAF policy has been created, we can apply it to the application gateway and WAF.</p>


<h1 id="Application Gateway Configuration">Application Gateway Configuration</h1>
<p> To configure a Web Application Firewall, the Virtual network needs to have an Application Gateway. The Application gateway and its accompanying WAF will be located in the AppGateBoundary, making the web server available to the internet and helping feed logs to the Sentinel environment.</p>
<img src="/assets/images/sentinelpostimg/image010.jpg" class="center"> 
<img src="/assets/images/sentinelpostimg/image012.jpg" class="center"> 
<img src="/assets/images/sentinelpostimg/image014.jpg" class="center"> 
<img src="/assets/images/sentinelpostimg/image016.jpg" class="center"> 
<p> To complete the configuration, a routing rule will need to be created to send traffic from the WAF to the webserver </p>
<img src="/assets/images/sentinelpostimg/image018.jpg" class="center"> 
<img src="/assets/images/sentinelpostimg/image020.jpg" class="center"> 
<img src="/assets/images/sentinelpostimg/image022.jpg" class="center"> 
<p>Now that the routing rules have been configured, we have the front end (our public IP), routing rules (connection from the public to the backend), and our backend pool. Now that our configuration has been completed, our web server should now be open to the internet</p>
<p>By going to the public IP of 20.163.243.165, We can see that the default Apache page is properly configured </p>
<img src="/assets/images/sentinelpostimg/image024.jpg" class="center">

<p>And if we look at the AppGateway/WAF, we can see these requests made to the gateway</p>
<img src="/assets/images/sentinelpostimg/image026.jpg" class="center">
<h1 id="Log Analytics Configuration">Log Analytics Configuration</h1>
<p>The primary data source for Sentinel is the Log Analytics platform; Azure Sentinel can not be configured before Log Analytics has been enabled. Log Analytics can be configured with the following command. </p>

<p><code> az monitor log-analytics workspace create -g AzureSentinelProj2022 -n SenNetLAW </code></p>
<img src="/assets/images/sentinelpostimg/image030.jpg" class="center">
<p> Log Analytics has now been created</p>

<h1 id="Sentinel Configuration">Sentinel Configuration</h1>

<p> Once Log analytics has been configured, it is possible to create a sentinel deployment in this virtual network.
Going to the Sentinel page, we will create a Microsoft Sentinel Instance.</p>
<img src="/assets/images/sentinelpostimg/image032.jpg" class="center">

<p>We need to attach a log analytics platform to Sentinel; previously, I had created SenNetLAW for this deployment of Sentinel.</p>
<img src="/assets/images/sentinelpostimg/image034.jpg" class="center">
<p>Now that log analytics has been selected, the Sentinel deployment has been completed. </p>
<img src="/assets/images/sentinelpostimg/image036.jpg" class="center">
<p>In its current state, the sentinel platform is empty. We need to add data connectors to the environment to populate the SIEM. </p>
<h1 id="Data Connectors">Data Connectors</h1>
<p>Azure has a wide variety of data connectors built into the platform that covers everything in the Azure environment. They also offer a content hub for services and devices such as darktrace or Palo Alto firewalls. For this project, I will need two separate data connectors, One for the WAF and one for the server. Data connectors can be found under the configuration tab on the left. </p>
<h2 id="WAF" > WAF</h2> 
<img src="/assets/images/sentinelpostimg/image038.jpg" class="center">
<p> Microsoft offers a prebuilt data connector for their WAF solution, which is called "Azure Web Application Firewall" We can connect this data connector by going to the Open Connector Page</p>
<img src="/assets/images/sentinelpostimg/image040.jpg" class="center">
<p>Each data connector has a different configuration method, but the page will have a walkthrough for these steps. </p>
<img src="/assets/images/sentinelpostimg/image042.jpg" class="center">
<p>The Application Gateway and WAF policy must have these values configured for this project. </p>


<p>From here, I will go to the DVWAAppGate and diagnostic settings </p>
<img src="/assets/images/sentinelpostimg/image044.jpg" class="center">
<p>Then add the diagnostic setting</p>
<img src="/assets/images/sentinelpostimg/image046.jpg" class="center">
<p>From here, I Will name the diagnostic setting name as AppGateLogs Select allLogs and send to log analytics workspace SenNetLAW and save </p>
<img src="/assets/images/sentinelpostimg/image048.jpg" class="center">
<p>Now we can see that the AppGate logs have been configured</p>
<img src="/assets/images/sentinelpostimg/image050.jpg" class="center">
<p>Now we need to do the same for the WAF Policy</p>
<p>We can find the diagnostic settings under activity log> export activity</p>
<img src="/assets/images/sentinelpostimg/image052.jpg" class="center">
<p>And we will repeat the same process with the policy by clicking add diagnostic</p>
<img src="/assets/images/sentinelpostimg/image054.jpg" class="center">
<p>And then selecting the following options in diagnostic settings, I excluded autoscale because the logs won't be relevant for this deployment. And then we want to save this.</p>
<img src="/assets/images/sentinelpostimg/image056.jpg" class="center">
<p>Now we can see WAFPolicyLogs in the diagnostic settings</p>
<img src="/assets/images/sentinelpostimg/image058.jpg" class="center">
<p>Now we can click back to the WAF data connector to finish the connection</p>
<img src="/assets/images/sentinelpostimg/image060.jpg" class="center">
<p>From here, we will want to add a Workbook and some templates</p>
<p>For the workbook, I'll use the Microsoft Web Application Firewall (WAF) – Azure WAF workbook</p>
<p>We can set this up by going to "go to workbooks gallery" on the right side.</p>
<img src="/assets/images/sentinelpostimg/image064.jpg" class="center">
<img src="/assets/images/sentinelpostimg/image066.jpg" class="center">
<p>From here we can view the template to see how the workbook looks</p>
<img src="/assets/images/sentinelpostimg/image068.jpg" class="center">
<p>And if we like the workbook, we can go back and hit save to add this to our dashboard.</p>
<img src="/assets/images/sentinelpostimg/image070.jpg" class="center">
<p>And the last piece we want to add is the analytics templates.</p>
<img src="/assets/images/sentinelpostimg/image072.jpg" class="center">
<p>I will be using the SQLi Detection Template because that is the focus of this project, So we click to create a rule, and this will bring us to the wizard</p>
<img src="/assets/images/sentinelpostimg/image074.jpg" class="center">
<p>Set rule logic allows us to modify the configuration and triggers for the analytics template. This standard configuration will be sufficient. The Wizard does allow us to run a check on the data that is currently available in log analytics</p>
<img src="/assets/images/sentinelpostimg/image076.jpg" class="center">
<p>For incident settings, we can turn on Alert grouping to allow Sentinel to connect alerts to start forming a timeline of events</p>
<img src="/assets/images/sentinelpostimg/image078.jpg" class="center">
<p>I am not creating an automated response for this because I want to review this incident manually. And I will be aware of it because I am the one executing it. We can move on to the review</p>
<img src="/assets/images/sentinelpostimg/image080.jpg" class="center">
<img src="/assets/images/sentinelpostimg/image082.jpg" class="center">
<p>Now that the WAF is sending Logs to Sentinel, we can see this data populate and move on to the next connector.</p>
<img src="/assets/images/sentinelpostimg/image084.jpg" class="center">
<h2 id="Virtual Machine" > Virtual Machine </h1>
<p>To send logs to Sentinel from a Linux-based server, we will need to use the Syslog data connector</p>
<img src="/assets/images/sentinelpostimg/image086.jpg" class="center">
<p>Azure makes these easy because the connector can be deployed as an agent on the existing server, reducing the time spent on the configuration. From here, we can click the "Install agent on azure Linux virtual machine" and then download and install</p>
<img src="/assets/images/sentinelpostimg/image088.jpg" class="center">
<p>We select our VM from this menu</p>
<img src="/assets/images/sentinelpostimg/image090.jpg" class="center">
<p>Then we can click connect on the VM's page</p>
<img src="/assets/images/sentinelpostimg/image092.jpg" class="center">
<p>The agent will begin to run on the selected virtual machine</p>
<img src="/assets/images/sentinelpostimg/image094.jpg" class="center">
<p>Now that we can see that the machine is connected to Syslog, we can go back and finish the configuration</p>
<img src="/assets/images/sentinelpostimg/image096.jpg" class="center">
<p>Now that the Syslog agent is connected, we can set the logging for the VM</p>
<img src="/assets/images/sentinelpostimg/image098.jpg" class="center">
<p>We go to open workspace agent and then change the facility name to Syslog and click apply</p>
<img src="/assets/images/sentinelpostimg/image100.jpg" class="center">
<p>We will go to Next Steps and add our Workbook</p>
<img src="/assets/images/sentinelpostimg/image102.jpg" class="center">
<p> And our Virtual machine will start sending logs to Sentinel</p>
<h1 id="Sentinel Workbook templates">Sentinel Workbook templates</h1>
<p>workbooks are dashboards specifically designed to show common information users look for in each service, they are customizable, but for this project, I want to keep them as the default because they will pull the information I need.</p>
<p>Now that the data connectors have been configured on the WAF and VM, we can look at the selected workbooks. If we go to workbooks on the sentinel dashboard, we will see the active connections.</p>
<img src="/assets/images/sentinelpostimg/image104.jpg" class="center">
<p>And from here, we can open the Syslog playbook and see some data being populated</p>
<img src="/assets/images/sentinelpostimg/image106.jpg" class="center">
<p>And looking at the WAF workbook, we'll see some requests by IP to the webserver.</p>

<h1 id="DVWA Installation">DVWA Installation</h1>

<p style="color:#FF0000">*Disclaimer* DO NOT INSTALL DVWA ON PUBLIC FACING SERVICES. This web app is riddled with vulnerabilities and can lead to any service being compromised. Any reference to the internet within this project is my IP or IPs I have allowed to the service.</p>

<p>DVWA is a web application built for web application penetration testing. It is easy to configure and available on GitHub. I choose this web application because of its ease of deployment, ease of use, and exploitability. To install DVWA, the server needs a LAMP stack that was installed previously. Using the bastion in the network, I connect to the VM, and I can begin the installation</p>

<p>I will disable MySQL.service because it is not needed on this server, pull a copy of DVWA, and set the default website to DVWA in Apache.</p>
<p><code> sudo systemctl stop mysql.service | sudo systemctl disable mysql.service<br>
#turning off mysql<br>
git clone https://github.com/digininja/DVWA.git <br>
#cloning DVWA<br>
echo '<?php phpinfo(); ?>' | sudo tee -a /var/www/html/phpinfo.php > /dev/null<br>
#generating phpinfo page<br>
cd DVWA<br>
cp config/config.inc.php.dist config/config.inc.php<br>
cd<br>
sudo mv DVWA /var/www/html<br>
cd /var/www/html/DVWA<br>
sudo nano /etc/apache2/sites-available/000-default.conf<br>
#the webpage needs to be pointed to the DVWA folder for it to load on default<br>
ServerAdmin webmaster@localhost<br>
DocumentRoot /var/www/html/DVWA<br>
sudo nano ./config/config.inc.php<br>
#the following change need to be made to connect the web app to the DB<br>
$_DVWA[ 'db_server'] = 'senvirtdb.mysql.database.azure.com'; *highlight*<br>
$_DVWA[ 'db_port'] = '3306';<br>
$_DVWA[ 'db_user' ] = 'dvwa';<br>
$_DVWA[ 'db_password' ] = 'p@ssw0rd';<br>
$_DVWA[ 'db_database' ] = 'dvwa';<br>
# Default security level<br>
# Default value for the security level with each session.<br>
# The default is 'impossible'. You may wish to set this to either 'low', 'medium', 'high' o><br>
$_DVWA[ 'default_security_level' ] = 'medium'; *highlight*<br>
sudo systemctl restart apache2<br>
#now the web server can be restarted to display the web application<br>
systemctl status apache2</code></p>
<img src="/assets/images/sentinelpostimg/image110.jpg" class="center">
<p>Now that the configuration has been completed, we can load the webpage</p>

<p>We now need to initialize the database by clicking create/reset the database</p>
<p>And we can see the database has been created and the main webpage is available</p>
<img src="/assets/images/sentinelpostimg/image112.jpg" class="center">
<img src="/assets/images/sentinelpostimg/image114.jpg" class="center">

<h1 id="SQL Injection">SQL Injection</h1>
<p> To generate Alerts and even incidents in Sentinel. I need something that will allow me to exploit the web application and the underlying database. I picked a relatively small webserver with the hope that it will send alerts to Sentinel as well regarding service health. While the networks have been segregated, the web application is still vulnerable and enumerating and dumping the database should not pose much of a challenge. By using automated database exploitation, I will be able to generate a lot of noise from the WAF and the database.</p>
<p>I picked SQLMap to execute the SQL Injection because it's a standard tool for database security testing across many database types. Its ease of use also helps because it will Enumerate, Exploit, and Report with limited input. I will also use OWASP Zap to pull a session cookie for SQLMap to bypass the login screen and begin executing SQL queries on the database.</p>
<p> I will pull the cookiee for this session by using ZAP's built in broser and saving the cookie from the request </p>
<img src="/assets/images/sentinelpostimg/image116.jpg" class="center">
<img src="/assets/images/sentinelpostimg/image120.jpg" class="center">
<p>Now that the cookie has been captured from the webserver, we can build our SQLMap command and begin enumerating the database by running the following command and setting the wizard option to allow SQLMap to automate the attack.</p>
<p><code> sqlmap -u “http://20.163.243.165/vulnerabilities/sqli/” --proxy=http://127.0.0.1:8080<br>
--cookie="PHPSESSID=ueufmufdimuqm9l72lf6on1lkg;security=medium"<br>
--data="id=1&Submit=Submit”"<br>
-wizard </code></p>
<img src="/assets/images/sentinelpostimg/image122.jpg" class="center">
<img src="/assets/images/sentinelpostimg/image126.jpg" class="center">
<p>Now that SQLMap has found a vulnerability, we can see the database is DVWA and scan for tables by running the following.</p>
<p><code> sqlmap -u “http://20.163.243.165/vulnerabilities/sqli/” --proxy=http://127.0.0.1:8080<br>
--cookie="PHPSESSID=ueufmufdimuqm9l72lf6on1lkg;security=medium"<br>
--data="id=1&Submit=Submit”"<br>
-wizard -D dvwa --tables</code></p>
<img src="/assets/images/sentinelpostimg/image130.jpg" class="center">
<p>We can see that the DVWA database contains the table guestbook and users. We want to find users and passwords, so we'll run the same command with the table users and search for columns</p>
<p><code>sqlmap -u “http://20.163.243.165/vulnerabilities/sqli/” --proxy=http://127.0.0.1:8080<br>
--cookie="PHPSESSID=ueufmufdimuqm9l72lf6on1lkg;security=medium"<br>
--data="id=1&Submit=Submit”"<br>
-wizard -D dvwa -T users --columns </code></p>
<img src="/assets/images/sentinelpostimg/image134.jpg" class="center">
<p>We can see that the table users contains the passwords and users. So we'll want to dump the users' table and crack the passwords by running the following command</p>
<p><code>sqlmap -u “http://20.163.243.165/vulnerabilities/sqli/” --proxy=http://127.0.0.1:8080<br>
--cookie="PHPSESSID=ueufmufdimuqm9l72lf6on1lkg;security=medium"<br>
--data="id=1&Submit=Submit”"<br>
-D dvwa -T users -dump </code></p>
<img src="/assets/images/sentinelpostimg/image136.jpg" class="center">
<p>The DVWA table users have been dumped, and the passwords have been cracked, revealing that the password for user gordonb is abc123. To verify this, we can log in to the DVWA website</p>
<img src="/assets/images/sentinelpostimg/image138.jpg" class="center">
<p>And here, we can see that logging in with gordonb was successful.</p>
<img src="/assets/images/sentinelpostimg/image140.jpg" class="center">
<p>Now that this SQL attack has been successfully executed, we can now view the attacks in Sentinel</p>

<h1 id="Sentinel Workbook">Sentinel Workbook</h1>
<p>Because a successful SQL Injection has been run against the web application, the WAF playbooks will begin to populate with data. This data is broken into several categories by default.</p>
<img src="/assets/images/sentinelpostimg/image142.jpg" class="center">
<p>The default dashboard at the beginning will show the basic time this attack was executed and the type of events the filters have caught.</p>
<img src="/assets/images/sentinelpostimg/image144.jpg" class="center">
<p>Scrolling down further, we can see detailed logs of the traffic that has flowed through the WAF that matched a pattern in the OWASP 3.2 rules, and we can see events that are attack specific.</p>
<img src="/assets/images/sentinelpostimg/image144.jpg" class="center">
<p>In these charts, we can filter logs from the WAF that are matched to an IP address. And we can see what rule these logs are attached to.</p>



<h1 id="Sentinel Incident">Sentinel Incident</h1>
<p>The playbooks configured show the message's detailed views for further analysis. But now that a SQL injection attack has occurred, the analytics rule configured earlier will trigger on the same event logs as seen above. This will now generate an incident. </p>
<img src="/assets/images/sentinelpostimg/image146.jpg" class="center">
<p>If we open the incidents, we can see that Sentinel has created an incident in our queue, and we can open this and start looking at the details.</p>
<img src="/assets/images/sentinelpostimg/image148.jpg" class="center">
<p>Below we can see that the incident has been populated with any information that Sentinel has deemed related. There are 570 events currently tied to this incident</p>
<img src="/assets/images/sentinelpostimg/image150.jpg" class="center">
<p>We can also look at the Rules that have triggered the event and related information such as IP addresses</p>
<img src="/assets/images/sentinelpostimg/image152.jpg" class="center">
<p>Sentinel also can visualize the attacks and help show the connections between events.</p>
<img src="/assets/images/sentinelpostimg/image154.jpg" class="center">
<p>Using the information from the incident, we can start to look at this attack through our workbooks and attempt to resolve this issue.</p>

<h1 id="WAF Prevention">WAF Prevention</h1>
<p>Because this is a vulnerable web application, this won't be expressly covered, but we can see the mitigation of turning the WAF from Detection to Prevention and rerun our attack. </p>
<img src="/assets/images/sentinelpostimg/image156.jpg" class="center">
<p>We need to change the WAF policy by clicking change to prevention in the WAF policy</p>
<img src="/assets/images/sentinelpostimg/image158.jpg" class="center">

<p>Now that we can see the WAF is in prevention mode and we will rerun the attack</p>
<p><code>sqlmap -u “http://20.163.243.165/vulnerabilities/sqli/” --proxy=http://127.0.0.1:8080<br>
--cookie="PHPSESSID=8c2npca2tvo936ht8j7f9knu3a;security=medium"<br>
--data="id=1&Submit=Submit”"<br>
-wizard </code></p>

<p>And as we can see, the attack fails immediately</p>
<img src="/assets/images/sentinelpostimg/image162.jpg" class="center">
<p>And if we check the workbook for the WAF, we will see that it has blocked an attempted SQL injection</p>
<img src="/assets/images/sentinelpostimg/image167.jpg" class="center">
</body>
